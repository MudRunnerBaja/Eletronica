/* ProgramaÃ§Ã£o PIC18F4685 - TESTE Mack1 I2C
  ProgramÃ§Ã£o para leitura sensor Temperatura CVT

  Sensor: MLX90614
  MCU: PIC18F4550

  EndereÃ§amento:
  Sensor: 0x5A
  Temperatura Ambiente: 0x06
  Temperatura Objeto: 0x07

  MudRunner 2020 - Teste interno
  Equipe EletrÃ´nica

*/

#include<stdio.h>
#include<string.h>
#include<math.h>

const sensor = 0x5A;
const ambiente = 0x06;
const sensorbin = 0x5B;
const objeto = 0x07;
char Temp1, Temp2, Temp3, Temp4;
float temp;

//FunÃ§Ã£o auxiliar conversÃ£o binÃ¡rio em hexadecimal

//Protocolo de comunicaÃ§Ã£o I2C (Leitura do sensor)

int leiturasensor(char temp_source) {
  unsigned int Temp_var, Temp_var1;

  I2C1_Start();                   // start no barramento i2c
  I2C1_Wr(sensor << 1);              // endereÃ§o da memÃ³ria no barramento + comando de escrita(0)
  I2C1_Wr(temp_source);              // endereÃ§o da eeprom onde serÃ¡ lido o byte
  I2C1_Repeated_Start();          // re-start no barramento
  I2C1_Wr(sensor << 1);           // endereÃ§o da memÃ³ria no barramento + comando de leitura(1)
  Temp_var = I2C1_Rd(0);          // Leitura do endereÃ§o
  Temp_var1 = (((I2C1_Rd(0) << 8)));  // FunÃ§Ã£o para conversÃ£o de bit para decimal (FunÃ§Ã£o auxiliar)
  I2C1_Stop();                    // finaliza a comunicaÃ§Ã£o i2c
  return Temp_var1;
}

void main() {

  TRISC    = 0xFE;                          //Configura o RC como saÃ­da
  PORTC    = 0xFE;                          //Inicializa o PORTC (RC em LOW)
  TRISC    = 0xFD;                          //Configura o RC como saÃ­da
  PORTC    = 0xFD;                          //Inicializa o PORTC (RC em LOW)
  ADCON1 = 0x0F;
  CMCON  = 0x07;
  I2C1_Init(50000);
  Delay_ms(100);

  while (1) {
    temp = (leiturasensor(objeto) / 50) - 273.15;
 }
}
