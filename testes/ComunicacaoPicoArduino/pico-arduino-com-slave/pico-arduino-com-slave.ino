#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>
#include <Wire.h>

  // xbm da imagem usada na tela;
static unsigned char mr_logo_bits[] ={
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x07, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x1E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x07, 0x9E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x9E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x07, 0x1E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x07, 0x9E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0x07, 0x00, 
  0x00, 0x00, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xFF, 0x0F, 0xE0, 0xFF, 0x3F, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x88, 0xFF, 0x0F, 0xF0, 0xFF, 0xFF, 0x83, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0xFF, 0x0F, 0xF8, 
  0xFF, 0xFF, 0x87, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xC0, 0x0F, 0xFE, 0xFF, 0xFF, 0x8F, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0xC0, 0x07, 0x3F, 0x00, 0xF8, 0x9F, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC0, 0x87, 0x3F, 
  0x00, 0xE0, 0x9F, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xC0, 0xC3, 0x3F, 0x3C, 0xC0, 0x9F, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0xE0, 0xE3, 0x3F, 0x7E, 0xC0, 0x9F, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xE0, 0xF3, 0x1F, 
  0x7F, 0xC0, 0x9F, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xF0, 0xFB, 0x9F, 0x7F, 0xE0, 0x8F, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0xF0, 0xBF, 0xCF, 0x7F, 0xF0, 0x87, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xF8, 0xDF, 0xE7, 
  0x3F, 0xFE, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xF8, 0xCF, 0xF7, 0x9F, 0x7F, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0xF8, 0xEF, 0xFF, 0x9F, 0x0F, 0x80, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFC, 0xE7, 0xBF, 
  0x9F, 0x0F, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xFC, 0xE7, 0x9F, 0x8F, 0x0F, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0xFE, 0xF3, 0xCF, 0x0F, 0x1F, 0x80, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFE, 0xF1, 0xC7, 
  0x0F, 0x1F, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0xFE, 0xF8, 0xE3, 0x07, 0x1E, 0x80, 0x07, 0x9E, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x7F, 0xF8, 0xE1, 0x07, 0x3E, 0x80, 0x07, 
  0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3F, 0xF8, 0xE0, 
  0xFF, 0xFF, 0x8F, 0x07, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x00, 0x78, 0xC0, 0xFF, 0xFE, 0x8F, 0x07, 0x9E, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x87, 0x07, 
  0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x07, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x07, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFC, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, };


unsigned int t0, tf; // Timers
char tvel[10] = "VEL: "; // String responsável por mostrar o valor da velocidade
char trpm[10] = "RPM: "; // String responsável por mostrar o valor do RPM
int vel = 55, rpm = 2700; // Valores arbitrários de teste
byte receivedData[32]; // Buffer de dados recebidos. Tamanho máximo de 32 bytes.

// Funções de inicialização do objeto u8g2 do display. Quando usando HW_SPI, apenas o SS precisa ser passado.

//U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, 18, 19, 17);
U8G2_ST7920_128X64_1_HW_SPI u8g2(U8G2_R2, 10);
//U8G2_ST7920_128X64_1_2ND_HW_SPI u8g2(U8G2_R0, 17);

void setup(void) 
{ 
  t0 = tf = millis();
  
  Wire.begin(9);
  Wire.onReceive(receiveEvent); // Evento -> chama a função receiveEvent quando recebe uma transmissão pelo i2c
  SPI.begin(); // Não sei se é necessário
  Serial.begin(9600);
  u8g2.begin();
  
  // Converte os valores de int para char e insere os chars nas strings declaradas no início.
  itoa(vel/10, &tvel[4], 10);
  itoa(vel%10, &tvel[5], 10);
  itoa(rpm/1000, &trpm[4], 10);
  itoa((rpm/100)%10, &trpm[5], 10);
  itoa((rpm%100)/10, &trpm[6], 10);
  itoa(rpm%10, &trpm[7], 10);
}

void loop(void) {
  int test = millis();

    UpdateDisplay();
    int timetest = millis() - test;
    Serial.print("\nTempo Trocando:");Serial.println(timetest);
    Serial.print("vel:");Serial.println(vel);
}

void UpdateDisplay() {
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_12x6LED_tf);
    u8g2.drawXBM(0, 0, 124, 64, mr_logo_bits);
    u8g2.drawStr(10,54,tvel);
    u8g2.drawStr(10,26,trpm);
  } while (u8g2.nextPage());
}

void receiveEvent(int bytesReceived) {  // É requisito que essas funções de evento tenham um parâmetro int.
  int b = 0; // Contador de bytes recebidos. Útil pra testar ou limitar a transmissão.
  while(Wire.available()) {
    receivedData[b] = Wire.read();
    b++;
  }
   // Como recebemos em bytes e int são data types de 2 bytes, precisamos transformar o byte mais alto em int e movê-lo para a esquerda. Um byte são 8 bits.
   // Depois, recebemos o byte mais baixo.
  vel = (int)receivedData[0] << 8 | (int)receivedData[1]; // Transforma byte receivedData[0] em int e o move 8 bits para a esquerda, e depois transforma e recebe o byte receivedData[1].
  rpm = (int)receivedData[2] << 8 | (int)receivedData[3];
  rpm = rpm / 100;

  // Converte os valores de int para char e insere os chars nas strings declaradas no início.
  itoa(vel/10, &tvel[4], 10);
  itoa(vel%10, &tvel[5], 10);
  itoa(rpm/10, &trpm[4], 10);
  itoa(rpm%10, &trpm[5], 10);
}
